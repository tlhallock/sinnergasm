syntax = "proto3";

package sinnergasm;

service VirtualWorkspaces {
  rpc CreateWorkspace(CreateRequest) returns (CreatedResponse);
  rpc ListWorkspaces(ListRequest) returns (WorkspaceList);
  rpc GetWorkspace(GetRequest) returns (Workspace);
  rpc DeleteWorkspace(DeleteRequest) returns (DeleteResponse);

  rpc ConfigureWorkspace(ConfigurationRequest) returns (ConfiguredResponse);
  rpc ShareFile(ShareFileRequest) returns (ShareFileResponse);
  rpc RemoveSharedFile(RemoveSharedFileRequest) returns (RemoveSharedFileResponse);
  rpc CloseWorkspace(CloseRequest) returns (CloseResponse);

  rpc TargetDevice(TargetRequest) returns (TargetResponse);

  rpc ControlWorkspace(stream ControlRequest) returns (ControlResponse);

  rpc SimulateWorkspace(SimulateRequest) returns (stream SimulationEvent);
  rpc CancelSimulation(CancelSimulationRequest) returns (CancelSimulationResponse);

  rpc SubscribeToWorkspace(WorkspaceSubscriptionRequest) returns (stream WorkspaceEvent);
  rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse);

  rpc DownloadFile(stream DownloadRequest) returns (stream DownloadResponse);
  rpc UploadFile(stream UploadRequest) returns (stream UploadResponse);
}


//////////////////////
// Create
//////////////////////
message CreateRequest {
  string workspace = 1;
}

message CreatedResponse {

}

//////////////////////
// List
//////////////////////
message ListRequest {
}

message WorkspaceList {
  repeated WorkspaceSummary workspaces = 1;
}

message WorkspaceSummary {
  string workspace = 1;
  uint32 number_of_monitors = 2;
  uint32 devices = 3;
}

//////////////////////
// Get
//////////////////////
message GetRequest {
  string name = 1;
}

message Workspace {
  string name = 1;
  string controller = 2;
  string target = 3;
  repeated Device devices = 4;
  repeated Monitor monitors = 5;
}

message Monitor {
  string name = 1;
  uint32 x = 2;
  uint32 y = 3;
  uint32 w = 4;
  uint32 h = 5;
  string device = 6;
}

message Device {
  string name = 1;
  bool controller = 2;
  repeated SharedFile files = 3;
}

message SharedFile {
  string relative_path = 1;
  optional uint64 size = 2;
}

//////////////////////
// Delete
//////////////////////

message DeleteRequest {
  string workspace = 1;
}

message DeleteResponse {

}


//////////////////////
// Configure
//////////////////////

message ConfigurationRequest {

}

message ConfiguredResponse {

}

//////////////////////
// Target
//////////////////////

message TargetRequest {
  string workspace = 1;
  string device = 3;
  optional string clipboard = 4;
}

message TargetResponse {

}

//////////////////////
// Join
//////////////////////

message JoinRequest {
  string workspace = 1;
  string device = 3;
  repeated string monitors = 4;
}

message JoinResponse {

}

//////////////////////
// Leave
//////////////////////

message LeaveRequest {
  string workspace = 1;
  string device = 3;
}

message LeaveResponse {

}

//////////////////////
// Control
//////////////////////

message ControlRequest {
  oneof event_type {
    UserInputEvent input_event = 1;
    ControlWorkspace workspace = 2;
  }
}

message ControlWorkspace {
  string workspace = 1;
  // TODO: this should be determined
  string device = 2;
}

message ControlResponse {


}

message ConfigurationUpdate {
  Workspace workspace = 1;
}


//////////////////////
// Subscription
//////////////////////

message WorkspaceSubscriptionRequest {
  string workspace = 1;
  string device = 2;
}

message WorkspaceEvent {
  oneof event_type {
    ConfigurationUpdate configuration_update = 1;
    Targetted targetted = 2;
    Untargetted untargetted = 3;
    TargetUpdate target_update = 4;
    DeviceConnected device_connected = 5;
    DeviceDisconnected device_disconnected = 6;
    UploadRequested download_request = 7;
  }
}

message Targetted {
  optional string clipboard = 2;
}

message Untargetted {
  string device = 1;
}

message TargetUpdate {
  string device = 1;
}

enum DeviceRole {
  UNKNOWN = 0;
  CONTROLLER = 1;
  SIMULATOR = 2;
  SUBSCRIBER = 3;
}

message DeviceConnected {
  string device = 1;
  // Wrap this under the configuration udpate?
  DeviceRole role = 2;
}

message DeviceDisconnected {
  string device = 1;
}

message UploadRequested {
  string download_device = 1;
  string relative_path = 2;
  optional uint64 buffer_size = 3;
}

//////////////////////
// Listen
//////////////////////

message SimulateRequest {
  string workspace = 1;
  string device = 2;
}

message SimulationEvent {
  UserInputEvent input_event = 1;
}

message UserInputEvent {
  oneof type {
    MouseMoveEvent mouse_move = 1;
    MouseButton mouse_press = 2;
    MouseButton mouse_release = 3;
    Key key_press = 4;
    Key key_release = 5;
    WheelEvent wheel = 6;
  }
}

message MouseMoveEvent {
  // double offset_x = 1;
  // double offset_y = 2;
  double delta_x = 1;
  double delta_y = 2;
}

message WheelEvent {
  // ... details
  sint32 dx = 1;
  sint32 dy = 2;
}


// Subscriptions
message CancelSimulationRequest {
  string workspace = 1;
  string device = 2;
}

message CancelSimulationResponse {}

message CancelSubscriptionRequest {
  string workspace = 1;
  string device = 2;
}

message CancelSubscriptionResponse {}


message MouseButton {
  oneof type {
    MouseButtons button = 1;
    uint32 other = 2;
  }
}

enum MouseButtons {
  UNKNOWN_BUTTON = 0;
  LEFT = 1;
  RIGHT = 2;
  MIDDLE = 3;
}


message Key {
  oneof key {
    KeyCode code = 1;
    uint32 other = 2;
  }
}





enum KeyCode {
  UNKNOWN_KEY = 0;
  ALT = 1;
  ALTGR = 2;
  BACKSPACE = 3;
  CAPSLOCK = 4;
  CONTROLLEFT = 5;
  CONTROLRIGHT = 6;
  DELETE = 7;
  DOWNARROW = 8;
  END = 9;
  ESCAPE = 10;
  F1 = 11;
  F10 = 12;
  F11 = 13;
  F12 = 14;
  F2 = 15;
  F3 = 16;
  F4 = 17;
  F5 = 18;
  F6 = 19;
  F7 = 20;
  F8 = 21;
  F9 = 22;
  HOME = 23;
  LEFTARROW = 24;
  METALEFT = 25;
  METARIGHT = 26;
  PAGEDOWN = 27;
  PAGEUP = 28;
  RETURN = 29;
  RIGHTARROW = 30;
  SHIFTLEFT = 31;
  SHIFTRIGHT = 32;
  SPACE = 33;
  TAB = 34;
  UPARROW = 35;
  PRINTSCREEN = 36;
  SCROLLLOCK = 37;
  PAUSE = 38;
  NUMLOCK = 39;
  BACKQUOTE = 40;
  NUM1 = 41;
  NUM2 = 42;
  NUM3 = 43;
  NUM4 = 44;
  NUM5 = 45;
  NUM6 = 46;
  NUM7 = 47;
  NUM8 = 48;
  NUM9 = 49;
  NUM0 = 50;
  MINUS = 51;
  EQUAL = 52;
  KEYQ = 53;
  KEYW = 54;
  KEYE = 55;
  KEYR = 56;
  KEYT = 57;
  KEYY = 58;
  KEYU = 59;
  KEYI = 60;
  KEYO = 61;
  KEYP = 62;
  LEFTBRACKET = 63;
  RIGHTBRACKET = 64;
  KEYA = 65;
  KEYS = 66;
  KEYD = 67;
  KEYF = 68;
  KEYG = 69;
  KEYH = 70;
  KEYJ = 71;
  KEYK = 72;
  KEYL = 73;
  SEMICOLON = 74;
  QUOTE = 75;
  BACKSLASH = 76;
  INTLBACKSLASH = 77;
  KEYZ = 78;
  KEYX = 79;
  KEYC = 80;
  KEYV = 81;
  KEYB = 82;
  KEYN = 83;
  KEYM = 84;
  COMMA = 85;
  DOT = 86;
  SLASH = 87;
  INSERT = 88;
  KPRETURN = 89;
  KPMINUS = 90;
  KPPLUS = 91;
  KPMULTIPLY = 92;
  KPDIVIDE = 93;
  KP0 = 94;
  KP1 = 95;
  KP2 = 96;
  KP3 = 97;
  KP4 = 98;
  KP5 = 99;
  KP6 = 100;
  KP7 = 101;
  KP8 = 102;
  KP9 = 103;
  KPDELETE = 104;
  FUNCTION = 105;
}



//////////////////////
// File sharing
//////////////////////

message DownloadRequest {
  oneof type {
    InitiateDownload initiate = 1;
    ChunkRequest request = 2;
    DownloadComplete complete = 3;
  }
}

message InitiateDownload {
  string workspace = 1;
  string download_device = 2;
  string upload_device = 3;
  string relative_path = 4;
  optional uint64 buffer_size = 5;
}

message ChunkRequest {
  uint64 offset = 1;
}

message DownloadComplete {}

message DownloadResponse {
  oneof type {
    DownloadInitated initated = 1;
    SharedFileChunk chunk = 2;
  }
}

message DownloadInitated {
  uint64 number_of_chunks = 1;
  uint64 buffer_size = 2;
  string checksum = 3;
  optional FilePermissions permissions = 4;
}

message FilePermissions {
  bool execute = 1;
  optional uint32 permissions = 2;
}

message SharedFileChunk {
  uint64 offset = 1;
  bytes data = 2;
}

message UploadRequest {
  oneof type {
    InitiateUpload initiate = 1;
    SharedFileChunk chunk = 2;
  }
}

message InitiateUpload {
  string workspace = 1;
  string download_device = 2;
  string upload_device = 3;
  string relative_path = 4;
  uint64 buffer_size = 5;
  string checksum = 6;
  uint64 number_of_chunks = 7;
  optional FilePermissions permissions = 8;
}


message UploadResponse {
  oneof type {
    ChunkRequest request = 1;
    UploadComplete complete = 2;
  }
}

message UploadComplete {}


message ShareFileRequest {
  string workspace = 1;
  string device = 2;
  string relative_path = 3;
  optional uint64 size = 4;
  optional FilePermissions permissions = 5;
}

message ShareFileResponse {}

message RemoveSharedFileRequest {
  string workspace = 1;
  string device = 2;
  string relative_path = 3;
}

message RemoveSharedFileResponse {}

message CloseRequest {
  string workspace = 1;
}

message CloseResponse {}